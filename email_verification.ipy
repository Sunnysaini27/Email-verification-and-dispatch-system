#!/usr/bin/env python
# coding: utf-8

# In[1]:

import nest_asyncio
nest_asyncio.apply()
import pandas as pd
from verify_email import verify_email
import openpyxl
import logging
import os
import datetime


# #### Creating logger 

# In[2]:


def setup_logging():
    # Create a log directory if it doesn't exist
    log_directory = 'logs_email_verification'
    os.makedirs(log_directory, exist_ok=True)

    # Create a logger
    logger = logging.getLogger(__name__)
    logger.setLevel(logging.DEBUG)

    # Create a log file with date, hour, and minute
    log_file = datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S.log')
    log_path = os.path.join(log_directory, log_file)
    file_handler = logging.FileHandler(log_path)

    # Define log format
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    file_handler.setFormatter(formatter)

    # Add the file handler to the logger
    logger.addHandler(file_handler)
    return logger

logger = setup_logging()
# In[3]:

def getting_sheet_name(file_path):
    excel_file = pd.ExcelFile(file_path)
    sheet_names = excel_file.sheet_names
    logger.info('Sheet name execute',sheet_names )
    return sheet_names


# In[4]:
#G:\Internship\final email verification\diverse_email_dataset2.xlsx


def email_verification(email, sheet_name):
    email_status_df = pd.read_excel("diverse_email_dataset2.xlsx")
    logger.info("email verication output file has total record:", len(email_status_df))
    
    email = email[email['Email'].isin(list(email_status_df['Email']))==False]
    email = email.reset_index(drop = True )
    email = email.head(10)
    #email['Status'] = ''
    #G:\Internship\email verification\diverse_email_dataset2.xlsx
    email_status = openpyxl.load_workbook("diverse_email_dataset2.xlsx")
    worksheet = email_status['Sheet1']
    for j in range(len(email)):
        email_add = email['Email'][j]
        status = verify_email(email_add,debug=True)
        last_row = worksheet.max_row + 1
        worksheet[f'A{last_row}'] = email['Email'][j]
        worksheet[f'B{last_row}'] = status
        worksheet[f'C{last_row}'] = sheet_name
        
        #email['Status'][j] = status
    email_status.save("diverse_email_dataset2.xlsx")
    return email


# In[5]:


def verification_output(file_path, sheet_name = None):
    email_df = pd.read_excel(file_path,sheet_name=sheet_name)
    
    if sheet_name == None :
        for sheet in getting_sheet_name(file_path):
            email = email_df[sheet]
            email = email_verification(email, sheet)
    else :
        email = email_verification(email_df,sheet_name)
    return email


# In[6]:


logger = setup_logging()
ip_file_path = "diverse_email_dataset1.xlsx"
full_path = ip_file_path
sheet_names = getting_sheet_name(full_path)
email_verify = verification_output(full_path)


